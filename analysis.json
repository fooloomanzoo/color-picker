{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`<color-element>` adds a color selector to your page using Polymer.\n\n```html\n<color-element value=\"{{color}}\"></color-element>\n```\nCustom property | Description | Default\n----------------|-------------|----------\n`--transparency-pattern` | background pattern for the transparency layer | linear-gradient(45deg, rgba(0,0,0,0.15) 25%, transparent 25%, transparent 75%, rgba(0,0,0,0.15) 75%, rgba(0,0,0,0.15)),\nlinear-gradient(45deg, rgba(0,0,0,0.15) 25%, transparent 25%, transparent 75%, rgba(0,0,0,0.15) 75%, rgba(0,0,0,0.15)))\r\n`--transparency-pattern-size` | size transparency pattern | 12px\n`--color-element-badge-radius` | border-radius of the badge | --input-picker-border-radius, 6px\n`--color-element-height` | height of the selector badge and the alpha- and the hue-slider| 184px\n`--color-element-width` | width of the selector badge | 184px\n`--color-slider-width` | width of the alpha- and the hue-slider | 16px\n`--color-slider-padding` | padding of the alpha- and the hue-slider | 2px\n`--color-pin-radius` | radius of the color pin | 3px\n`--color-selector-mix-blend-mode` | mix-blend-mode of the selectors (sliders and color pin) | exclusion\n`--color-element` | mixin applied to the color element | {}\n\nHave a look at [input-picker-pattern#input-shared-style](https://github.com/fooloomanzoo/input-picker-pattern#input-shared-style) to see the used style-properties.",
      "summary": "",
      "path": "color-element.js",
      "properties": [
        {
          "name": "_sliderWidth",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 8
            },
            "end": {
              "line": 196,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_saturationHeight",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 8
            },
            "end": {
              "line": 201,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "184",
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_saturationWidth",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 8
            },
            "end": {
              "line": 206,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "184",
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_hueContext",
          "type": "CanvasRenderingContext2D | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 208,
              "column": 8
            },
            "end": {
              "line": 210,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "CanvasRenderingContext2D"
            }
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_saturationContext",
          "type": "CanvasRenderingContext2D | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 8
            },
            "end": {
              "line": 214,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "CanvasRenderingContext2D"
            }
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_alphaContext",
          "type": "CanvasRenderingContext2D | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 8
            },
            "end": {
              "line": 218,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "CanvasRenderingContext2D"
            }
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "hideRandomButton",
          "type": "boolean | null | undefined",
          "description": "if true the random button is hidden",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 8
            },
            "end": {
              "line": 225,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "propertyForValue",
          "type": "string | null | undefined",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 61,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_createReflectPropertyToValueObserver\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "hex",
          "type": "string | null | undefined",
          "description": "Hex-color",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 286,
              "column": 8
            },
            "end": {
              "line": 290,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_hexChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "r",
          "type": "number | null | undefined",
          "description": "Red",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 295,
              "column": 8
            },
            "end": {
              "line": 298,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "g",
          "type": "number | null | undefined",
          "description": "Green",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 303,
              "column": 8
            },
            "end": {
              "line": 306,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "b",
          "type": "number | null | undefined",
          "description": "Blue",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 311,
              "column": 8
            },
            "end": {
              "line": 314,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "h",
          "type": "number | null | undefined",
          "description": "Hue",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 319,
              "column": 8
            },
            "end": {
              "line": 322,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "s",
          "type": "number | null | undefined",
          "description": "Saturation (hsl)",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 327,
              "column": 8
            },
            "end": {
              "line": 330,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "l",
          "type": "number | null | undefined",
          "description": "Lightness",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 335,
              "column": 8
            },
            "end": {
              "line": 338,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "alpha",
          "type": "number | null | undefined",
          "description": "Alpha",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 343,
              "column": 8
            },
            "end": {
              "line": 348,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_alphaChanged\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "1",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "alphaMode",
          "type": "boolean | null | undefined",
          "description": "if true, colorString has alpha",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 353,
              "column": 8
            },
            "end": {
              "line": 357,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_alphaModeChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "withoutAlpha",
          "type": "boolean | null | undefined",
          "description": "if true, alpha won't be used",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 362,
              "column": 8
            },
            "end": {
              "line": 365,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_withoutAlphaChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "hslPrecision",
          "type": "number | null | undefined",
          "description": "Precision of hsl-colorStrings, if the format is 'hsl' (for saturation and lightness it is applied according to their percentage colorString)",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 370,
              "column": 8
            },
            "end": {
              "line": 373,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "format",
          "type": "string | null | undefined",
          "description": "format of the colorString (possible colorStrings: 'rgb', 'hex', 'hsl', 'auto')",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 378,
              "column": 8
            },
            "end": {
              "line": 383,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_formatChanged\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"auto\"",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "fixedFormat",
          "type": "boolean | null | undefined",
          "description": "format is locked and does not switch according to the colorString",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 388,
              "column": 8
            },
            "end": {
              "line": 390,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_hexAlphaSupported",
          "type": "boolean | null | undefined",
          "description": "if true, hex alpha is supported by the browser",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 395,
              "column": 8
            },
            "end": {
              "line": 398,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "colorString",
          "type": "string | null | undefined",
          "description": "value as color-string",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 403,
              "column": 8
            },
            "end": {
              "line": 407,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_colorStringChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "name of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 46,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "description for the element and can be used as a hint for invalid values",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 53,
              "column": 8
            },
            "end": {
              "line": 56,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value",
          "type": "Object | null | undefined",
          "description": "value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 73,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "type": "Object | null | undefined",
          "description": "default value of the value, when it does not validate",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_defaultChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "disables the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 90,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 95,
              "column": 8
            },
            "end": {
              "line": 100,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 105,
              "column": 8
            },
            "end": {
              "line": 110,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "valueIsSet",
          "type": "boolean | null | undefined",
          "description": "is true when the value is set",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 115,
              "column": 8
            },
            "end": {
              "line": 119,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_isSet",
          "type": "Function | null | undefined",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 124,
              "column": 8
            },
            "end": {
              "line": 126,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_validate",
          "type": "Function | null | undefined",
          "description": "validates the value (when required)",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 133,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 418,
              "column": 4
            },
            "end": {
              "line": 421,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 147,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "render",
          "description": "render the element",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 252,
              "column": 4
            },
            "end": {
              "line": 258,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "resize",
          "description": "resize the element",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 4
            },
            "end": {
              "line": 266,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_computeColorElementContexts",
          "description": "computes the canvas contexts of the color element",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 4
            },
            "end": {
              "line": 291,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_computeColorElementSizeProperties",
          "description": "computes the size properties for the color element canvas",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 296,
              "column": 4
            },
            "end": {
              "line": 318,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_initializeHueSlider",
          "description": "draw hue-sliders background",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 323,
              "column": 4
            },
            "end": {
              "line": 337,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hueContext"
            },
            {
              "name": "sliderWidth"
            },
            {
              "name": "saturationHeight"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_drawColorElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 339,
              "column": 4
            },
            "end": {
              "line": 365,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alphaContext"
            },
            {
              "name": "saturationContext"
            },
            {
              "name": "h"
            },
            {
              "name": "sliderWidth"
            },
            {
              "name": "saturationWidth"
            },
            {
              "name": "saturationHeight"
            },
            {
              "name": "withoutAlpha"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_moveHueSlider",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 367,
              "column": 4
            },
            "end": {
              "line": 369,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "h"
            },
            {
              "name": "height"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_moveAlphaSlider",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 371,
              "column": 4
            },
            "end": {
              "line": 376,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alpha"
            },
            {
              "name": "height"
            },
            {
              "name": "withoutAlpha"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_moveColorPin",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 378,
              "column": 4
            },
            "end": {
              "line": 387,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "s"
            },
            {
              "name": "l"
            },
            {
              "name": "width"
            },
            {
              "name": "height"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_moveSelector",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 389,
              "column": 4
            },
            "end": {
              "line": 395,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onDown",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 397,
              "column": 4
            },
            "end": {
              "line": 402,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onTrack",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 404,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onKeyDown",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 453,
              "column": 4
            },
            "end": {
              "line": 505,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onUp",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 507,
              "column": 4
            },
            "end": {
              "line": 511,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onDblClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 513,
              "column": 4
            },
            "end": {
              "line": 513,
              "column": 20
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onSelectEnd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 515,
              "column": 4
            },
            "end": {
              "line": 522,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onColorElementBlur",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 524,
              "column": 4
            },
            "end": {
              "line": 527,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onColorElementFocus",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 529,
              "column": 4
            },
            "end": {
              "line": 532,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_stopPropagation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 534,
              "column": 4
            },
            "end": {
              "line": 537,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_getActiveProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 539,
              "column": 4
            },
            "end": {
              "line": 544,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_checkSelectorForProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 546,
              "column": 4
            },
            "end": {
              "line": 556,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_defineActiveCanvas",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 558,
              "column": 4
            },
            "end": {
              "line": 571,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_computeIsSetFunction",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-text-input.js",
            "start": {
              "line": 33,
              "column": 4
            },
            "end": {
              "line": 68,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "propertyForValue"
            },
            {
              "name": "format"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorFormMixin"
        },
        {
          "name": "reset",
          "description": "reset the value",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 238,
              "column": 4
            },
            "end": {
              "line": 244,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "randomColor",
          "description": "generate random color",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 426,
              "column": 4
            },
            "end": {
              "line": 429,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "resetColor",
          "description": "reset all color properties",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 447,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_createTestCanvas",
          "description": "creates a canvas for testing a color string and browser capabilities",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 465,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_colorStringChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 467,
              "column": 4
            },
            "end": {
              "line": 565,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "colorString"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_computeColorString",
          "description": "compute color string",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 575,
              "column": 4
            },
            "end": {
              "line": 655,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rgb",
              "type": "rgbObject",
              "description": "The rgb object"
            },
            {
              "name": "hsl",
              "type": "hslObject",
              "description": "The hsl object"
            },
            {
              "name": "hex",
              "type": "string",
              "description": "The hex string"
            },
            {
              "name": "oldColor",
              "type": "string",
              "description": "The old color string before setting"
            }
          ],
          "return": {
            "type": "[type]",
            "desc": "The computed color string"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_hexChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 657,
              "column": 4
            },
            "end": {
              "line": 677,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_rgbChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 679,
              "column": 4
            },
            "end": {
              "line": 723,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "r"
            },
            {
              "name": "g"
            },
            {
              "name": "b"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_hslChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 725,
              "column": 4
            },
            "end": {
              "line": 768,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "h"
            },
            {
              "name": "s"
            },
            {
              "name": "l"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_formatChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 770,
              "column": 4
            },
            "end": {
              "line": 786,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "format"
            },
            {
              "name": "oldFormat"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_alphaChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 788,
              "column": 4
            },
            "end": {
              "line": 818,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alpha"
            },
            {
              "name": "oldAlpha"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_alphaModeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 820,
              "column": 4
            },
            "end": {
              "line": 841,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alphaMode"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_withoutAlphaChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 843,
              "column": 4
            },
            "end": {
              "line": 853,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "withoutAlpha"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_attachDom",
          "description": "attach dom with `delegatesFocus: true` so that the element is also focussed while its's children are too, and to autofocus to first tabable",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 39,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_defaultIsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 155,
              "column": 4
            },
            "end": {
              "line": 157,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "value to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is set"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_defaultValidate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 167,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet",
              "type": "Function",
              "description": "The function that defines if the value is set"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "value to validate"
            },
            {
              "name": "required",
              "type": "Boolean",
              "description": "if true, the value is required"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is valid"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeInvalid",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 178,
              "column": 4
            },
            "end": {
              "line": 180,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "validate"
            },
            {
              "name": "isSet"
            },
            {
              "name": "value"
            },
            {
              "name": "required"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeValueIsSet",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 187,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 191,
              "column": 4
            },
            "end": {
              "line": 196,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_defaultChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 198,
              "column": 4
            },
            "end": {
              "line": 206,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_createReflectPropertyToValueObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 208,
              "column": 4
            },
            "end": {
              "line": 218,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectPropertyToValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 220,
              "column": 4
            },
            "end": {
              "line": 222,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectValueToProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 224,
              "column": 4
            },
            "end": {
              "line": 226,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "validate",
          "description": "validates the input for iron-form",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 231,
              "column": 4
            },
            "end": {
              "line": 233,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "FormElementMixin"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/color-element.html",
          "description": "Color Element"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 607,
          "column": 7
        },
        "end": {
          "line": 635,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "ColorElement",
      "attributes": [
        {
          "name": "hide-random-button",
          "description": "if true the random button is hidden",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 8
            },
            "end": {
              "line": 225,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 61,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "hex",
          "description": "Hex-color",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 286,
              "column": 8
            },
            "end": {
              "line": 290,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "r",
          "description": "Red",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 295,
              "column": 8
            },
            "end": {
              "line": 298,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "g",
          "description": "Green",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 303,
              "column": 8
            },
            "end": {
              "line": 306,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "b",
          "description": "Blue",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 311,
              "column": 8
            },
            "end": {
              "line": 314,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "h",
          "description": "Hue",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 319,
              "column": 8
            },
            "end": {
              "line": 322,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "s",
          "description": "Saturation (hsl)",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 327,
              "column": 8
            },
            "end": {
              "line": 330,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "l",
          "description": "Lightness",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 335,
              "column": 8
            },
            "end": {
              "line": 338,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "alpha",
          "description": "Alpha",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 343,
              "column": 8
            },
            "end": {
              "line": 348,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "alpha-mode",
          "description": "if true, colorString has alpha",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 353,
              "column": 8
            },
            "end": {
              "line": 357,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "without-alpha",
          "description": "if true, alpha won't be used",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 362,
              "column": 8
            },
            "end": {
              "line": 365,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "hsl-precision",
          "description": "Precision of hsl-colorStrings, if the format is 'hsl' (for saturation and lightness it is applied according to their percentage colorString)",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 370,
              "column": 8
            },
            "end": {
              "line": 373,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "format",
          "description": "format of the colorString (possible colorStrings: 'rgb', 'hex', 'hsl', 'auto')",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 378,
              "column": 8
            },
            "end": {
              "line": 383,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "fixed-format",
          "description": "format is locked and does not switch according to the colorString",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 388,
              "column": 8
            },
            "end": {
              "line": 390,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "color-string",
          "description": "value as color-string",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 403,
              "column": 8
            },
            "end": {
              "line": 407,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "name",
          "description": "name of the input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 46,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "description": "description for the element and can be used as a hint for invalid values",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 53,
              "column": 8
            },
            "end": {
              "line": 56,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value",
          "description": "value of the input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 73,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "description": "default value of the value, when it does not validate",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "description": "disables the input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 90,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "description": "required attribute",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 95,
              "column": 8
            },
            "end": {
              "line": 100,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "description": "required attribute",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 105,
              "column": 8
            },
            "end": {
              "line": 110,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value-is-set",
          "description": "is true when the value is set",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 115,
              "column": 8
            },
            "end": {
              "line": 119,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "color-element",
      "mixins": [
        "Polymer.GestureEventListeners",
        "ColorElementPattern",
        "ColorFormMixin",
        "ColorMixin",
        "FormElementMixin"
      ]
    },
    {
      "description": "`color-picker` is a picker for color for **[Polymer](https://github.com/Polymer/polymer)** that can use the native input, too. If the **native** picker is choosen and is not supported, this element uses the **polyfill** datetime-picker. The `<calendar-element>` and the `<time-element>` will come in place if the native picker is not available or is not explicitly wanted. `css-value` will give you directly the css-string.\n\n ```html\n   <color-picker value=\"{{value}}\"></color-picker>\n ```\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--transparency-pattern` | background pattern for the transparency layer | linear-gradient(45deg, rgba(0,0,0,0.15) 25%, transparent 25%, transparent 75%, rgba(0,0,0,0.15) 75%, rgba(0,0,0,0.15)), linear-gradient(45deg, rgba(0,0,0,0.15) 25%, transparent 25%, transparent 75%, rgba(0,0,0,0.15) 75%, rgba(0,0,0,0.15)))\n`--transparency-pattern-size` | size transparency pattern | 12px\n`--color-element-badge-radius` | border-radius of the badge | --input-picker-border-radius, 6px\n`--color-element-height` | height of the selector badge and the alpha- and the hue-slider| 184px\n`--color-element-width` | width of the selector badge | 184px\n`--color-slider-width` | width of the alpha- and the hue-slider | 16px\n`--color-slider-padding` | padding of the alpha- and the hue-slider | 2px\n`--color-pin-radius` | radius of the color pin | 3px\n`--color-selector-mix-blend-mode` | mix-blend-mode of the selectors (sliders and color pin) | exclusion\n`--color-element` | mixin applied to the color element | {}\n\n Have a look at `<color-element>` and [input-picker-pattern#input-shared-style](https://github.com/fooloomanzoo/input-picker-pattern#input-shared-style) to see the used style-properties.",
      "summary": "",
      "path": "color-picker.js",
      "properties": [
        {
          "name": "_confirmedColorHeight",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 8
            },
            "end": {
              "line": 149,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_confirmedColorWidth",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 8
            },
            "end": {
              "line": 153,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_confirmedColorCanvasContext",
          "type": "CanvasRenderingContext2D | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 8
            },
            "end": {
              "line": 157,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "CanvasRenderingContext2D"
            }
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_sliderWidth",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 194,
              "column": 8
            },
            "end": {
              "line": 196,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_saturationHeight",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 198,
              "column": 8
            },
            "end": {
              "line": 201,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "184",
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_saturationWidth",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 203,
              "column": 8
            },
            "end": {
              "line": 206,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "184",
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_hueContext",
          "type": "CanvasRenderingContext2D | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 208,
              "column": 8
            },
            "end": {
              "line": 210,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "CanvasRenderingContext2D"
            }
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_saturationContext",
          "type": "CanvasRenderingContext2D | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 212,
              "column": 8
            },
            "end": {
              "line": 214,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "CanvasRenderingContext2D"
            }
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_alphaContext",
          "type": "CanvasRenderingContext2D | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 216,
              "column": 8
            },
            "end": {
              "line": 218,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "CanvasRenderingContext2D"
            }
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "hideRandomButton",
          "type": "boolean | null | undefined",
          "description": "if true the random button is hidden",
          "privacy": "public",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 223,
              "column": 8
            },
            "end": {
              "line": 225,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_hslStep",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-input.js",
            "start": {
              "line": 66,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorInputPattern"
        },
        {
          "name": "_hslPercentStep",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-input.js",
            "start": {
              "line": 71,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorInputPattern"
        },
        {
          "name": "hideTransparencyPattern",
          "type": "boolean | null | undefined",
          "description": "hide the transparency pattern",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 50,
              "column": 8
            },
            "end": {
              "line": 53,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "noRandomColorOnClick",
          "type": "boolean | null | undefined",
          "description": "if true, clicking on the color badge won't generate a random color",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 58,
              "column": 8
            },
            "end": {
              "line": 62,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_noRandomColorOnClickChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_badgeWidth",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 66,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_badgeHeight",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 68,
              "column": 8
            },
            "end": {
              "line": 70,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_badgeContext",
          "type": "CanvasRenderingContext2D | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "CanvasRenderingContext2D"
            }
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "propertyForValue",
          "type": "string | null | undefined",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 61,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_createReflectPropertyToValueObserver\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "hex",
          "type": "string | null | undefined",
          "description": "Hex-color",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 286,
              "column": 8
            },
            "end": {
              "line": 290,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_hexChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "r",
          "type": "number | null | undefined",
          "description": "Red",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 295,
              "column": 8
            },
            "end": {
              "line": 298,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "g",
          "type": "number | null | undefined",
          "description": "Green",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 303,
              "column": 8
            },
            "end": {
              "line": 306,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "b",
          "type": "number | null | undefined",
          "description": "Blue",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 311,
              "column": 8
            },
            "end": {
              "line": 314,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "h",
          "type": "number | null | undefined",
          "description": "Hue",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 319,
              "column": 8
            },
            "end": {
              "line": 322,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "s",
          "type": "number | null | undefined",
          "description": "Saturation (hsl)",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 327,
              "column": 8
            },
            "end": {
              "line": 330,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "l",
          "type": "number | null | undefined",
          "description": "Lightness",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 335,
              "column": 8
            },
            "end": {
              "line": 338,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "alpha",
          "type": "number | null | undefined",
          "description": "Alpha",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 343,
              "column": 8
            },
            "end": {
              "line": 348,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_alphaChanged\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "1",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "alphaMode",
          "type": "boolean | null | undefined",
          "description": "if true, colorString has alpha",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 353,
              "column": 8
            },
            "end": {
              "line": 357,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_alphaModeChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "withoutAlpha",
          "type": "boolean | null | undefined",
          "description": "if true, alpha won't be used",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 362,
              "column": 8
            },
            "end": {
              "line": 365,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_withoutAlphaChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "hslPrecision",
          "type": "number | null | undefined",
          "description": "Precision of hsl-colorStrings, if the format is 'hsl' (for saturation and lightness it is applied according to their percentage colorString)",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 370,
              "column": 8
            },
            "end": {
              "line": 373,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "format",
          "type": "string | null | undefined",
          "description": "format of the colorString (possible colorStrings: 'rgb', 'hex', 'hsl', 'auto')",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 378,
              "column": 8
            },
            "end": {
              "line": 383,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_formatChanged\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"auto\"",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "fixedFormat",
          "type": "boolean | null | undefined",
          "description": "format is locked and does not switch according to the colorString",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 388,
              "column": 8
            },
            "end": {
              "line": 390,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_hexAlphaSupported",
          "type": "boolean | null | undefined",
          "description": "if true, hex alpha is supported by the browser",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 395,
              "column": 8
            },
            "end": {
              "line": 398,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "colorString",
          "type": "string | null | undefined",
          "description": "value as color-string",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 403,
              "column": 8
            },
            "end": {
              "line": 407,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_colorStringChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "name of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 46,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "description for the element and can be used as a hint for invalid values",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 53,
              "column": 8
            },
            "end": {
              "line": 56,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value",
          "type": "Object | null | undefined",
          "description": "value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 73,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "type": "Object | null | undefined",
          "description": "default value of the value, when it does not validate",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_defaultChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "disables the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 90,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 95,
              "column": 8
            },
            "end": {
              "line": 100,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 105,
              "column": 8
            },
            "end": {
              "line": 110,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "valueIsSet",
          "type": "boolean | null | undefined",
          "description": "is true when the value is set",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 115,
              "column": 8
            },
            "end": {
              "line": 119,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_isSet",
          "type": "Function | null | undefined",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 124,
              "column": 8
            },
            "end": {
              "line": 126,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_validate",
          "type": "Function | null | undefined",
          "description": "validates the value (when required)",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 133,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "native",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to use the native input, if it available",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 159,
              "column": 8
            },
            "end": {
              "line": 162,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "nativeOnMobile",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to use the native input automatically on mobile devices, if it available",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 167,
              "column": 8
            },
            "end": {
              "line": 170,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_nativeOnMobileChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "mobileUserAgentTestString",
          "type": "string | null | undefined",
          "description": "When `nativeOnMobile` is set to `true` this string is used to test the userAgent for a mobile device",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 175,
              "column": 8
            },
            "end": {
              "line": 179,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_nativeOnMobileChanged\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"mM]obi|[tT]ablet|[aA]ndroid\"",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "opened",
          "type": "boolean | null | undefined",
          "description": "if `true` the picker is opened",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 184,
              "column": 8
            },
            "end": {
              "line": 189,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "horizontalAlign",
          "type": "string | null | undefined",
          "description": "The orientation against which to align the element horizontally\nrelative to the related input element. Possible values are \"left\", \"right\", \"center\", \"auto\". (comparable to `iron-fit-behavior` and its `no-overlap`-attribute)",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 195,
              "column": 8
            },
            "end": {
              "line": 199,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"auto\"",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "verticalAlign",
          "type": "string | null | undefined",
          "description": "The orientation against which to align the element vertically\nrelative to the related input element. Possible values are \"top\", \"bottom\", \"middle\", \"auto\". (comparable to `iron-fit-behavior` and its `no-overlap`-attribute)",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 205,
              "column": 8
            },
            "end": {
              "line": 209,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"auto\"",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "autoConfirm",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to make the input auto-confirming",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 214,
              "column": 8
            },
            "end": {
              "line": 217,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_autoConfirmChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "noCancelOnEscKey",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to disable canceling the overlay with the ESC key.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 222,
              "column": 8
            },
            "end": {
              "line": 225,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "noCancelOnOutsideClick",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to disable canceling the dropdown by clicking outside the picker.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 230,
              "column": 8
            },
            "end": {
              "line": 233,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "noCloseOnPickerOpened",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to disable closing the dropdown when opening another picker.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 238,
              "column": 8
            },
            "end": {
              "line": 241,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "noTip",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to disable the tip of the picker",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 246,
              "column": 8
            },
            "end": {
              "line": 249,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "confirmedValue",
          "type": "Object | null | undefined",
          "description": "The confirmed value. When `auto-confirm` is not set, the value will only change, when you confirm.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 254,
              "column": 8
            },
            "end": {
              "line": 257,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_hasNative",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 301,
              "column": 2
            },
            "end": {
              "line": 303,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 418,
              "column": 4
            },
            "end": {
              "line": 421,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 278,
              "column": 4
            },
            "end": {
              "line": 285,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "render",
          "description": "render the element",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 97,
              "column": 4
            },
            "end": {
              "line": 99,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "resize",
          "description": "resize the element",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 106,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "reset",
          "description": "reset confirmedValue and value",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 493,
              "column": 4
            },
            "end": {
              "line": 498,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Number",
              "description": "value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_computeConfirmedColorContext",
          "description": "computes the canvas context of the recent color badge",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 4
            },
            "end": {
              "line": 205,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_computeConfirmedColorSizeProperties",
          "description": "computes the size properties for the confirmed color badge canvas",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 210,
              "column": 4
            },
            "end": {
              "line": 224,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_drawConfimedColorBadge",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "confirmedColorCanvasContext"
            },
            {
              "name": "value"
            },
            {
              "name": "width"
            },
            {
              "name": "height"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_openedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 391,
              "column": 4
            },
            "end": {
              "line": 415,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opened"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_onDblClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 513,
              "column": 4
            },
            "end": {
              "line": 513,
              "column": 20
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_addClickListenerForBadge",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 182,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_removeClickListenerForBadge",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 184,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_resetValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 504,
              "column": 4
            },
            "end": {
              "line": 506,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_computeColorElementContexts",
          "description": "computes the canvas contexts of the color element",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 271,
              "column": 4
            },
            "end": {
              "line": 291,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_computeColorElementSizeProperties",
          "description": "computes the size properties for the color element canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 296,
              "column": 4
            },
            "end": {
              "line": 318,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_initializeHueSlider",
          "description": "draw hue-sliders background",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 323,
              "column": 4
            },
            "end": {
              "line": 337,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hueContext"
            },
            {
              "name": "sliderWidth"
            },
            {
              "name": "saturationHeight"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_drawColorElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 339,
              "column": 4
            },
            "end": {
              "line": 365,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alphaContext"
            },
            {
              "name": "saturationContext"
            },
            {
              "name": "h"
            },
            {
              "name": "sliderWidth"
            },
            {
              "name": "saturationWidth"
            },
            {
              "name": "saturationHeight"
            },
            {
              "name": "withoutAlpha"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_moveHueSlider",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 367,
              "column": 4
            },
            "end": {
              "line": 369,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "h"
            },
            {
              "name": "height"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_moveAlphaSlider",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 371,
              "column": 4
            },
            "end": {
              "line": 376,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alpha"
            },
            {
              "name": "height"
            },
            {
              "name": "withoutAlpha"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_moveColorPin",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 378,
              "column": 4
            },
            "end": {
              "line": 387,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "s"
            },
            {
              "name": "l"
            },
            {
              "name": "width"
            },
            {
              "name": "height"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_moveSelector",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 389,
              "column": 4
            },
            "end": {
              "line": 395,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onDown",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 397,
              "column": 4
            },
            "end": {
              "line": 402,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onTrack",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 404,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onKeyDown",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 453,
              "column": 4
            },
            "end": {
              "line": 505,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onUp",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 507,
              "column": 4
            },
            "end": {
              "line": 511,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onSelectEnd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 515,
              "column": 4
            },
            "end": {
              "line": 522,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onColorElementBlur",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 524,
              "column": 4
            },
            "end": {
              "line": 527,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onColorElementFocus",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 529,
              "column": 4
            },
            "end": {
              "line": 532,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_stopPropagation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 341,
              "column": 4
            },
            "end": {
              "line": 344,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_getActiveProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 539,
              "column": 4
            },
            "end": {
              "line": 544,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_checkSelectorForProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 546,
              "column": 4
            },
            "end": {
              "line": 556,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_defineActiveCanvas",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 558,
              "column": 4
            },
            "end": {
              "line": 571,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_equals",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-input.js",
            "start": {
              "line": 78,
              "column": 4
            },
            "end": {
              "line": 80,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "ColorInputPattern"
        },
        {
          "name": "_equalsNot",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-input.js",
            "start": {
              "line": 82,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            },
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "ColorInputPattern"
        },
        {
          "name": "_computeHexPatternString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-input.js",
            "start": {
              "line": 86,
              "column": 4
            },
            "end": {
              "line": 88,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_validateHex"
            }
          ],
          "inheritedFrom": "ColorInputPattern"
        },
        {
          "name": "_computeHslStep",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-input.js",
            "start": {
              "line": 90,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hslPrecision"
            }
          ],
          "inheritedFrom": "ColorInputPattern"
        },
        {
          "name": "_computeHslPercentStep",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-input.js",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 96,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hslPrecision"
            }
          ],
          "inheritedFrom": "ColorInputPattern"
        },
        {
          "name": "_computeFormatPattern",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-text-input.js",
            "start": {
              "line": 128,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "format"
            },
            {
              "name": "fixedFormat"
            },
            {
              "name": "alphaMode"
            }
          ],
          "inheritedFrom": "ColorTextInputPattern"
        },
        {
          "name": "_computeFormatPlaceholder",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-text-input.js",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 159,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "format"
            },
            {
              "name": "alphaMode"
            },
            {
              "name": "hexAlphaSupported"
            }
          ],
          "inheritedFrom": "ColorTextInputPattern"
        },
        {
          "name": "randomColor",
          "description": "generate random color",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 426,
              "column": 4
            },
            "end": {
              "line": 429,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_draw",
          "description": "fills a canvas context with a color",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 130,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context",
              "type": "CanvasRenderingContext2D",
              "description": "The context of the canvas that should be drawn."
            },
            {
              "name": "colorString",
              "type": "String",
              "description": "The color string to be drawn."
            },
            {
              "name": "width",
              "type": "Number",
              "description": "The width to draw within the canvas."
            },
            {
              "name": "height",
              "type": "Number",
              "description": "The height to draw within the canvas"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_computeBadgeContext",
          "description": "computes the canvas contexts of the badge element",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 142,
              "column": 4
            },
            "end": {
              "line": 148,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_computeBadgeSizeProperties",
          "description": "computes the size properties for the badge canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 153,
              "column": 4
            },
            "end": {
              "line": 167,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_noRandomColorOnClickChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 169,
              "column": 4
            },
            "end": {
              "line": 175,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "noRandomColorOnClick"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_computeIsSetFunction",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-text-input.js",
            "start": {
              "line": 33,
              "column": 4
            },
            "end": {
              "line": 68,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "propertyForValue"
            },
            {
              "name": "format"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorFormMixin"
        },
        {
          "name": "resetColor",
          "description": "reset all color properties",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 447,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_createTestCanvas",
          "description": "creates a canvas for testing a color string and browser capabilities",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 465,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_colorStringChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 467,
              "column": 4
            },
            "end": {
              "line": 565,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "colorString"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_computeColorString",
          "description": "compute color string",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 575,
              "column": 4
            },
            "end": {
              "line": 655,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rgb",
              "type": "rgbObject",
              "description": "The rgb object"
            },
            {
              "name": "hsl",
              "type": "hslObject",
              "description": "The hsl object"
            },
            {
              "name": "hex",
              "type": "string",
              "description": "The hex string"
            },
            {
              "name": "oldColor",
              "type": "string",
              "description": "The old color string before setting"
            }
          ],
          "return": {
            "type": "[type]",
            "desc": "The computed color string"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_hexChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 657,
              "column": 4
            },
            "end": {
              "line": 677,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_rgbChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 679,
              "column": 4
            },
            "end": {
              "line": 723,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "r"
            },
            {
              "name": "g"
            },
            {
              "name": "b"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_hslChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 725,
              "column": 4
            },
            "end": {
              "line": 768,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "h"
            },
            {
              "name": "s"
            },
            {
              "name": "l"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_formatChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 770,
              "column": 4
            },
            "end": {
              "line": 786,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "format"
            },
            {
              "name": "oldFormat"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_alphaChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 788,
              "column": 4
            },
            "end": {
              "line": 818,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alpha"
            },
            {
              "name": "oldAlpha"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_alphaModeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 820,
              "column": 4
            },
            "end": {
              "line": 841,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alphaMode"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_withoutAlphaChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 843,
              "column": 4
            },
            "end": {
              "line": 853,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "withoutAlpha"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_attachDom",
          "description": "attach dom with `delegatesFocus: true` so that the element is also focussed while its's children are too, and to autofocus to first tabable",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 39,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_defaultIsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 155,
              "column": 4
            },
            "end": {
              "line": 157,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "value to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is set"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_defaultValidate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 167,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet",
              "type": "Function",
              "description": "The function that defines if the value is set"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "value to validate"
            },
            {
              "name": "required",
              "type": "Boolean",
              "description": "if true, the value is required"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is valid"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeInvalid",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 178,
              "column": 4
            },
            "end": {
              "line": 180,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "validate"
            },
            {
              "name": "isSet"
            },
            {
              "name": "value"
            },
            {
              "name": "required"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeValueIsSet",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 187,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 474,
              "column": 4
            },
            "end": {
              "line": 479,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_defaultChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 519,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_createReflectPropertyToValueObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 208,
              "column": 4
            },
            "end": {
              "line": 218,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectPropertyToValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 220,
              "column": 4
            },
            "end": {
              "line": 222,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectValueToProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 224,
              "column": 4
            },
            "end": {
              "line": 226,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "validate",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 417,
              "column": 4
            },
            "end": {
              "line": 424,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 291,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_computeShouldNative",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 293,
              "column": 4
            },
            "end": {
              "line": 295,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "native"
            }
          ],
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_addPickerTransitionEndListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 297,
              "column": 4
            },
            "end": {
              "line": 304,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_removePickerTransitionEndListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 306,
              "column": 4
            },
            "end": {
              "line": 308,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_onPickerTransitionEnd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 310,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_addCancelOnClickListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 321,
              "column": 4
            },
            "end": {
              "line": 326,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_removeCancelOnClickListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 328,
              "column": 4
            },
            "end": {
              "line": 331,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_addCloseOnPickerOpenedListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 333,
              "column": 4
            },
            "end": {
              "line": 335,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_removeCloseOnPickerOpenedListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 337,
              "column": 4
            },
            "end": {
              "line": 339,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_addKeyListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 348,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_removeKeyListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 350,
              "column": 4
            },
            "end": {
              "line": 352,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_nativeOnMobileChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 354,
              "column": 4
            },
            "end": {
              "line": 367,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_checkKeycode",
          "description": "key press event handler",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 373,
              "column": 4
            },
            "end": {
              "line": 389,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "[type]",
              "description": "Event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "open",
          "description": "open the picker",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 429,
              "column": 4
            },
            "end": {
              "line": 432,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "close",
          "description": "close the picker",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 437,
              "column": 4
            },
            "end": {
              "line": 439,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "toggle",
          "description": "toggle the picker",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 444,
              "column": 4
            },
            "end": {
              "line": 446,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "confirm",
          "description": "confirms the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 451,
              "column": 4
            },
            "end": {
              "line": 457,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "cancel",
          "description": "cancels the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 463,
              "column": 4
            },
            "end": {
              "line": 472,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_confirmedValueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 481,
              "column": 4
            },
            "end": {
              "line": 487,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "confirmedValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_setConfirmedValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 500,
              "column": 4
            },
            "end": {
              "line": 502,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_autoConfirmChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 508,
              "column": 4
            },
            "end": {
              "line": 512,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoConfirm"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/color-picker.html",
          "description": "Color Picker"
        },
        {
          "url": "demo/form.html",
          "description": "In A Form"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 295,
          "column": 7
        },
        "end": {
          "line": 311,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "ColorPicker",
      "attributes": [
        {
          "name": "hide-random-button",
          "description": "if true the random button is hidden",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 223,
              "column": 8
            },
            "end": {
              "line": 225,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "hide-transparency-pattern",
          "description": "hide the transparency pattern",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 50,
              "column": 8
            },
            "end": {
              "line": 53,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "no-random-color-on-click",
          "description": "if true, clicking on the color badge won't generate a random color",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 58,
              "column": 8
            },
            "end": {
              "line": 62,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 61,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "hex",
          "description": "Hex-color",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 286,
              "column": 8
            },
            "end": {
              "line": 290,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "r",
          "description": "Red",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 295,
              "column": 8
            },
            "end": {
              "line": 298,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "g",
          "description": "Green",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 303,
              "column": 8
            },
            "end": {
              "line": 306,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "b",
          "description": "Blue",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 311,
              "column": 8
            },
            "end": {
              "line": 314,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "h",
          "description": "Hue",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 319,
              "column": 8
            },
            "end": {
              "line": 322,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "s",
          "description": "Saturation (hsl)",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 327,
              "column": 8
            },
            "end": {
              "line": 330,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "l",
          "description": "Lightness",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 335,
              "column": 8
            },
            "end": {
              "line": 338,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "alpha",
          "description": "Alpha",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 343,
              "column": 8
            },
            "end": {
              "line": 348,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "alpha-mode",
          "description": "if true, colorString has alpha",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 353,
              "column": 8
            },
            "end": {
              "line": 357,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "without-alpha",
          "description": "if true, alpha won't be used",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 362,
              "column": 8
            },
            "end": {
              "line": 365,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "hsl-precision",
          "description": "Precision of hsl-colorStrings, if the format is 'hsl' (for saturation and lightness it is applied according to their percentage colorString)",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 370,
              "column": 8
            },
            "end": {
              "line": 373,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "format",
          "description": "format of the colorString (possible colorStrings: 'rgb', 'hex', 'hsl', 'auto')",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 378,
              "column": 8
            },
            "end": {
              "line": 383,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "fixed-format",
          "description": "format is locked and does not switch according to the colorString",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 388,
              "column": 8
            },
            "end": {
              "line": 390,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "color-string",
          "description": "value as color-string",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 403,
              "column": 8
            },
            "end": {
              "line": 407,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "name",
          "description": "name of the input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 46,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "description": "description for the element and can be used as a hint for invalid values",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 53,
              "column": 8
            },
            "end": {
              "line": 56,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value",
          "description": "value of the input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 73,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "description": "default value of the value, when it does not validate",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "description": "disables the input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 90,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "description": "required attribute",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 95,
              "column": 8
            },
            "end": {
              "line": 100,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "description": "required attribute",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 105,
              "column": 8
            },
            "end": {
              "line": 110,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value-is-set",
          "description": "is true when the value is set",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 115,
              "column": 8
            },
            "end": {
              "line": 119,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "native",
          "description": "Set to `true` to use the native input, if it available",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 159,
              "column": 8
            },
            "end": {
              "line": 162,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "native-on-mobile",
          "description": "Set to `true` to use the native input automatically on mobile devices, if it available",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 167,
              "column": 8
            },
            "end": {
              "line": 170,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "mobile-user-agent-test-string",
          "description": "When `nativeOnMobile` is set to `true` this string is used to test the userAgent for a mobile device",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 175,
              "column": 8
            },
            "end": {
              "line": 179,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "opened",
          "description": "if `true` the picker is opened",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 184,
              "column": 8
            },
            "end": {
              "line": 189,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "horizontal-align",
          "description": "The orientation against which to align the element horizontally\nrelative to the related input element. Possible values are \"left\", \"right\", \"center\", \"auto\". (comparable to `iron-fit-behavior` and its `no-overlap`-attribute)",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 195,
              "column": 8
            },
            "end": {
              "line": 199,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "vertical-align",
          "description": "The orientation against which to align the element vertically\nrelative to the related input element. Possible values are \"top\", \"bottom\", \"middle\", \"auto\". (comparable to `iron-fit-behavior` and its `no-overlap`-attribute)",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 205,
              "column": 8
            },
            "end": {
              "line": 209,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "auto-confirm",
          "description": "Set to `true` to make the input auto-confirming",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 214,
              "column": 8
            },
            "end": {
              "line": 217,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "no-cancel-on-esc-key",
          "description": "Set to `true` to disable canceling the overlay with the ESC key.",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 222,
              "column": 8
            },
            "end": {
              "line": 225,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "no-cancel-on-outside-click",
          "description": "Set to `true` to disable canceling the dropdown by clicking outside the picker.",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 230,
              "column": 8
            },
            "end": {
              "line": 233,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "no-close-on-picker-opened",
          "description": "Set to `true` to disable closing the dropdown when opening another picker.",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 238,
              "column": 8
            },
            "end": {
              "line": 241,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "no-tip",
          "description": "Set to `true` to disable the tip of the picker",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 246,
              "column": 8
            },
            "end": {
              "line": 249,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "confirmed-value",
          "description": "The confirmed value. When `auto-confirm` is not set, the value will only change, when you confirm.",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 254,
              "column": 8
            },
            "end": {
              "line": 257,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "input-picker-closed",
          "description": "input-picker-closed\nFired after a picker has been closed.",
          "metadata": {},
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "type": "CustomEvent",
          "name": "input-picker-opened",
          "description": "input-picker-opened\nFired when a picker has been opened.",
          "metadata": {},
          "inheritedFrom": "InputPickerPattern"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "color-picker",
      "mixins": [
        "ColorPickerPattern",
        "ColorElementPattern",
        "ColorInputPattern",
        "ColorTextInputPattern",
        "ColorBadgePattern",
        "ColorFormMixin",
        "ColorMixin",
        "InputPickerPattern"
      ]
    },
    {
      "description": "`<overlay-color-picker>` extends `color-picker` in an overlay.\n\n ```html\n   <overlay-color-picker value=\"{{value}}\"></overlay-color-picker>\n ```",
      "summary": "",
      "path": "overlay-color-picker.js",
      "properties": [
        {
          "name": "alwaysOnTop",
          "type": "boolean | null | undefined",
          "description": "Set to true to keep overlay always on top.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/overlay-picker-mixin.js",
            "start": {
              "line": 19,
              "column": 8
            },
            "end": {
              "line": 21,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "noOverlap",
          "type": "boolean | null | undefined",
          "description": "Will position the element around the positionTarget without overlapping it.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/overlay-picker-mixin.js",
            "start": {
              "line": 25,
              "column": 8
            },
            "end": {
              "line": 28,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "withBackdrop",
          "type": "boolean | null | undefined",
          "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/overlay-picker-mixin.js",
            "start": {
              "line": 33,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "noCancelOnOutsideClick",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to disable canceling the dropdown by clicking outside the picker.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 230,
              "column": 8
            },
            "end": {
              "line": 233,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "dynamicAlign",
          "type": "boolean | null | undefined",
          "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as preferred alignment\nand if there's not enough space, it will pick the values which minimize the cropping.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/overlay-picker-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 52,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "autoFitOnAttach",
          "type": "boolean | null | undefined",
          "description": "Set to true to auto-fit on attach.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/overlay-picker-mixin.js",
            "start": {
              "line": 57,
              "column": 8
            },
            "end": {
              "line": 60,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "fitInto",
          "type": "Object | null | undefined",
          "description": "The element to fit the overlay into. By default it is the window.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/overlay-picker-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "positionTarget",
          "type": "Element | null | undefined",
          "description": "The element that should be used to position the overlay. If not set, it will\ndefault to the polyfill node.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/overlay-picker-mixin.js",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 75,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Element"
            }
          },
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "_sizingTarget",
          "type": "Element | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/overlay-picker-mixin.js",
            "start": {
              "line": 77,
              "column": 8
            },
            "end": {
              "line": 80,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Element"
            }
          },
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "_confirmedColorHeight",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-picker.js",
            "start": {
              "line": 147,
              "column": 8
            },
            "end": {
              "line": 149,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_confirmedColorWidth",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-picker.js",
            "start": {
              "line": 151,
              "column": 8
            },
            "end": {
              "line": 153,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_confirmedColorCanvasContext",
          "type": "CanvasRenderingContext2D | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-picker.js",
            "start": {
              "line": 155,
              "column": 8
            },
            "end": {
              "line": 157,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "CanvasRenderingContext2D"
            }
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_sliderWidth",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 194,
              "column": 8
            },
            "end": {
              "line": 196,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_saturationHeight",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 198,
              "column": 8
            },
            "end": {
              "line": 201,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "184",
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_saturationWidth",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 203,
              "column": 8
            },
            "end": {
              "line": 206,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "184",
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_hueContext",
          "type": "CanvasRenderingContext2D | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 208,
              "column": 8
            },
            "end": {
              "line": 210,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "CanvasRenderingContext2D"
            }
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_saturationContext",
          "type": "CanvasRenderingContext2D | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 212,
              "column": 8
            },
            "end": {
              "line": 214,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "CanvasRenderingContext2D"
            }
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_alphaContext",
          "type": "CanvasRenderingContext2D | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 216,
              "column": 8
            },
            "end": {
              "line": 218,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "CanvasRenderingContext2D"
            }
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "hideRandomButton",
          "type": "boolean | null | undefined",
          "description": "if true the random button is hidden",
          "privacy": "public",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 223,
              "column": 8
            },
            "end": {
              "line": 225,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_hslStep",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-input.js",
            "start": {
              "line": 66,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorInputPattern"
        },
        {
          "name": "_hslPercentStep",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-input.js",
            "start": {
              "line": 71,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorInputPattern"
        },
        {
          "name": "hideTransparencyPattern",
          "type": "boolean | null | undefined",
          "description": "hide the transparency pattern",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 50,
              "column": 8
            },
            "end": {
              "line": 53,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "noRandomColorOnClick",
          "type": "boolean | null | undefined",
          "description": "if true, clicking on the color badge won't generate a random color",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 58,
              "column": 8
            },
            "end": {
              "line": 62,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_noRandomColorOnClickChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_badgeWidth",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 66,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_badgeHeight",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 68,
              "column": 8
            },
            "end": {
              "line": 70,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_badgeContext",
          "type": "CanvasRenderingContext2D | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "CanvasRenderingContext2D"
            }
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "propertyForValue",
          "type": "string | null | undefined",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 61,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_createReflectPropertyToValueObserver\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "hex",
          "type": "string | null | undefined",
          "description": "Hex-color",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 286,
              "column": 8
            },
            "end": {
              "line": 290,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_hexChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "r",
          "type": "number | null | undefined",
          "description": "Red",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 295,
              "column": 8
            },
            "end": {
              "line": 298,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "g",
          "type": "number | null | undefined",
          "description": "Green",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 303,
              "column": 8
            },
            "end": {
              "line": 306,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "b",
          "type": "number | null | undefined",
          "description": "Blue",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 311,
              "column": 8
            },
            "end": {
              "line": 314,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "h",
          "type": "number | null | undefined",
          "description": "Hue",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 319,
              "column": 8
            },
            "end": {
              "line": 322,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "s",
          "type": "number | null | undefined",
          "description": "Saturation (hsl)",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 327,
              "column": 8
            },
            "end": {
              "line": 330,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "l",
          "type": "number | null | undefined",
          "description": "Lightness",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 335,
              "column": 8
            },
            "end": {
              "line": 338,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "alpha",
          "type": "number | null | undefined",
          "description": "Alpha",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 343,
              "column": 8
            },
            "end": {
              "line": 348,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_alphaChanged\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "1",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "alphaMode",
          "type": "boolean | null | undefined",
          "description": "if true, colorString has alpha",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 353,
              "column": 8
            },
            "end": {
              "line": 357,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_alphaModeChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "withoutAlpha",
          "type": "boolean | null | undefined",
          "description": "if true, alpha won't be used",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 362,
              "column": 8
            },
            "end": {
              "line": 365,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_withoutAlphaChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "hslPrecision",
          "type": "number | null | undefined",
          "description": "Precision of hsl-colorStrings, if the format is 'hsl' (for saturation and lightness it is applied according to their percentage colorString)",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 370,
              "column": 8
            },
            "end": {
              "line": 373,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "format",
          "type": "string | null | undefined",
          "description": "format of the colorString (possible colorStrings: 'rgb', 'hex', 'hsl', 'auto')",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 378,
              "column": 8
            },
            "end": {
              "line": 383,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_formatChanged\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"auto\"",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "fixedFormat",
          "type": "boolean | null | undefined",
          "description": "format is locked and does not switch according to the colorString",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 388,
              "column": 8
            },
            "end": {
              "line": 390,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_hexAlphaSupported",
          "type": "boolean | null | undefined",
          "description": "if true, hex alpha is supported by the browser",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 395,
              "column": 8
            },
            "end": {
              "line": 398,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "colorString",
          "type": "string | null | undefined",
          "description": "value as color-string",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 403,
              "column": 8
            },
            "end": {
              "line": 407,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_colorStringChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "name of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 46,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "description for the element and can be used as a hint for invalid values",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 53,
              "column": 8
            },
            "end": {
              "line": 56,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value",
          "type": "Object | null | undefined",
          "description": "value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 73,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "type": "Object | null | undefined",
          "description": "default value of the value, when it does not validate",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_defaultChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "disables the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 90,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 95,
              "column": 8
            },
            "end": {
              "line": 100,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "type": "boolean | null | undefined",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 105,
              "column": 8
            },
            "end": {
              "line": 110,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "valueIsSet",
          "type": "boolean | null | undefined",
          "description": "is true when the value is set",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 115,
              "column": 8
            },
            "end": {
              "line": 119,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_isSet",
          "type": "Function | null | undefined",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 124,
              "column": 8
            },
            "end": {
              "line": 126,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_validate",
          "type": "Function | null | undefined",
          "description": "validates the value (when required)",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 133,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "native",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to use the native input, if it available",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 159,
              "column": 8
            },
            "end": {
              "line": 162,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "nativeOnMobile",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to use the native input automatically on mobile devices, if it available",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 167,
              "column": 8
            },
            "end": {
              "line": 170,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_nativeOnMobileChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "mobileUserAgentTestString",
          "type": "string | null | undefined",
          "description": "When `nativeOnMobile` is set to `true` this string is used to test the userAgent for a mobile device",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 175,
              "column": 8
            },
            "end": {
              "line": 179,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_nativeOnMobileChanged\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"mM]obi|[tT]ablet|[aA]ndroid\"",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "opened",
          "type": "boolean | null | undefined",
          "description": "if `true` the picker is opened",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 184,
              "column": 8
            },
            "end": {
              "line": 189,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "horizontalAlign",
          "type": "string | null | undefined",
          "description": "The orientation against which to align the element horizontally\nrelative to the related input element. Possible values are \"left\", \"right\", \"center\", \"auto\". (comparable to `iron-fit-behavior` and its `no-overlap`-attribute)",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 195,
              "column": 8
            },
            "end": {
              "line": 199,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"auto\"",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "verticalAlign",
          "type": "string | null | undefined",
          "description": "The orientation against which to align the element vertically\nrelative to the related input element. Possible values are \"top\", \"bottom\", \"middle\", \"auto\". (comparable to `iron-fit-behavior` and its `no-overlap`-attribute)",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 205,
              "column": 8
            },
            "end": {
              "line": 209,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"auto\"",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "autoConfirm",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to make the input auto-confirming",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 214,
              "column": 8
            },
            "end": {
              "line": 217,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_autoConfirmChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "noCancelOnEscKey",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to disable canceling the overlay with the ESC key.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 222,
              "column": 8
            },
            "end": {
              "line": 225,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "noCloseOnPickerOpened",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to disable closing the dropdown when opening another picker.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 238,
              "column": 8
            },
            "end": {
              "line": 241,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "noTip",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to disable the tip of the picker",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 246,
              "column": 8
            },
            "end": {
              "line": 249,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "confirmedValue",
          "type": "Object | null | undefined",
          "description": "The confirmed value. When `auto-confirm` is not set, the value will only change, when you confirm.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 254,
              "column": 8
            },
            "end": {
              "line": 257,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_hasNative",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 2
            },
            "end": {
              "line": 42,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 278,
              "column": 4
            },
            "end": {
              "line": 285,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "fit",
          "description": "Positions and fits the overlay into the `fitInto` element.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/overlay-picker-mixin.js",
            "start": {
              "line": 128,
              "column": 4
            },
            "end": {
              "line": 130,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "open",
          "description": "open the picker",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 429,
              "column": 4
            },
            "end": {
              "line": 432,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "notifyResize",
          "description": "notify manually the overlay to resize",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/overlay-picker-mixin.js",
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 142,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 418,
              "column": 4
            },
            "end": {
              "line": 421,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "render",
          "description": "render the element",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 97,
              "column": 4
            },
            "end": {
              "line": 99,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "resize",
          "description": "resize the element",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 106,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "reset",
          "description": "reset confirmedValue and value",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 493,
              "column": 4
            },
            "end": {
              "line": 498,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Number",
              "description": "value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_computeConfirmedColorContext",
          "description": "computes the canvas context of the recent color badge",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-picker.js",
            "start": {
              "line": 198,
              "column": 4
            },
            "end": {
              "line": 205,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_computeConfirmedColorSizeProperties",
          "description": "computes the size properties for the confirmed color badge canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-picker.js",
            "start": {
              "line": 210,
              "column": 4
            },
            "end": {
              "line": 224,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_drawConfimedColorBadge",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-picker.js",
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "confirmedColorCanvasContext"
            },
            {
              "name": "value"
            },
            {
              "name": "width"
            },
            {
              "name": "height"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorPickerPattern"
        },
        {
          "name": "_openedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 391,
              "column": 4
            },
            "end": {
              "line": 415,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opened"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_onDblClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 513,
              "column": 4
            },
            "end": {
              "line": 513,
              "column": 20
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_addClickListenerForBadge",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 182,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_removeClickListenerForBadge",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 184,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_resetValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 504,
              "column": 4
            },
            "end": {
              "line": 506,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_computeColorElementContexts",
          "description": "computes the canvas contexts of the color element",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 271,
              "column": 4
            },
            "end": {
              "line": 291,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_computeColorElementSizeProperties",
          "description": "computes the size properties for the color element canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 296,
              "column": 4
            },
            "end": {
              "line": 318,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_initializeHueSlider",
          "description": "draw hue-sliders background",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 323,
              "column": 4
            },
            "end": {
              "line": 337,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hueContext"
            },
            {
              "name": "sliderWidth"
            },
            {
              "name": "saturationHeight"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_drawColorElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 339,
              "column": 4
            },
            "end": {
              "line": 365,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alphaContext"
            },
            {
              "name": "saturationContext"
            },
            {
              "name": "h"
            },
            {
              "name": "sliderWidth"
            },
            {
              "name": "saturationWidth"
            },
            {
              "name": "saturationHeight"
            },
            {
              "name": "withoutAlpha"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_moveHueSlider",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 367,
              "column": 4
            },
            "end": {
              "line": 369,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "h"
            },
            {
              "name": "height"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_moveAlphaSlider",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 371,
              "column": 4
            },
            "end": {
              "line": 376,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alpha"
            },
            {
              "name": "height"
            },
            {
              "name": "withoutAlpha"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_moveColorPin",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 378,
              "column": 4
            },
            "end": {
              "line": 387,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "s"
            },
            {
              "name": "l"
            },
            {
              "name": "width"
            },
            {
              "name": "height"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_moveSelector",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 389,
              "column": 4
            },
            "end": {
              "line": 395,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onDown",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 397,
              "column": 4
            },
            "end": {
              "line": 402,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onTrack",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 404,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onKeyDown",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 453,
              "column": 4
            },
            "end": {
              "line": 505,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onUp",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 507,
              "column": 4
            },
            "end": {
              "line": 511,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onSelectEnd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 515,
              "column": 4
            },
            "end": {
              "line": 522,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onColorElementBlur",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 524,
              "column": 4
            },
            "end": {
              "line": 527,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_onColorElementFocus",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 529,
              "column": 4
            },
            "end": {
              "line": 532,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_stopPropagation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 341,
              "column": 4
            },
            "end": {
              "line": 344,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_getActiveProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 539,
              "column": 4
            },
            "end": {
              "line": 544,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_checkSelectorForProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 546,
              "column": 4
            },
            "end": {
              "line": 556,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_defineActiveCanvas",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 558,
              "column": 4
            },
            "end": {
              "line": 571,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "_equals",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-input.js",
            "start": {
              "line": 78,
              "column": 4
            },
            "end": {
              "line": 80,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "ColorInputPattern"
        },
        {
          "name": "_equalsNot",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-input.js",
            "start": {
              "line": 82,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            },
            {
              "name": "c"
            }
          ],
          "inheritedFrom": "ColorInputPattern"
        },
        {
          "name": "_computeHexPatternString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-input.js",
            "start": {
              "line": 86,
              "column": 4
            },
            "end": {
              "line": 88,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_validateHex"
            }
          ],
          "inheritedFrom": "ColorInputPattern"
        },
        {
          "name": "_computeHslStep",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-input.js",
            "start": {
              "line": 90,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hslPrecision"
            }
          ],
          "inheritedFrom": "ColorInputPattern"
        },
        {
          "name": "_computeHslPercentStep",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-input.js",
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 96,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hslPrecision"
            }
          ],
          "inheritedFrom": "ColorInputPattern"
        },
        {
          "name": "_computeFormatPattern",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-text-input.js",
            "start": {
              "line": 128,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "format"
            },
            {
              "name": "fixedFormat"
            },
            {
              "name": "alphaMode"
            }
          ],
          "inheritedFrom": "ColorTextInputPattern"
        },
        {
          "name": "_computeFormatPlaceholder",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-text-input.js",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 159,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "format"
            },
            {
              "name": "alphaMode"
            },
            {
              "name": "hexAlphaSupported"
            }
          ],
          "inheritedFrom": "ColorTextInputPattern"
        },
        {
          "name": "randomColor",
          "description": "generate random color",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 426,
              "column": 4
            },
            "end": {
              "line": 429,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_draw",
          "description": "fills a canvas context with a color",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 130,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "context",
              "type": "CanvasRenderingContext2D",
              "description": "The context of the canvas that should be drawn."
            },
            {
              "name": "colorString",
              "type": "String",
              "description": "The color string to be drawn."
            },
            {
              "name": "width",
              "type": "Number",
              "description": "The width to draw within the canvas."
            },
            {
              "name": "height",
              "type": "Number",
              "description": "The height to draw within the canvas"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_computeBadgeContext",
          "description": "computes the canvas contexts of the badge element",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 142,
              "column": 4
            },
            "end": {
              "line": 148,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_computeBadgeSizeProperties",
          "description": "computes the size properties for the badge canvas",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 153,
              "column": 4
            },
            "end": {
              "line": 167,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_noRandomColorOnClickChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 169,
              "column": 4
            },
            "end": {
              "line": 175,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "noRandomColorOnClick"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "_computeIsSetFunction",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-text-input.js",
            "start": {
              "line": 33,
              "column": 4
            },
            "end": {
              "line": 68,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "propertyForValue"
            },
            {
              "name": "format"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorFormMixin"
        },
        {
          "name": "resetColor",
          "description": "reset all color properties",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 434,
              "column": 4
            },
            "end": {
              "line": 447,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_createTestCanvas",
          "description": "creates a canvas for testing a color string and browser capabilities",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 465,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_colorStringChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 467,
              "column": 4
            },
            "end": {
              "line": 565,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "colorString"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_computeColorString",
          "description": "compute color string",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 575,
              "column": 4
            },
            "end": {
              "line": 655,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rgb",
              "type": "rgbObject",
              "description": "The rgb object"
            },
            {
              "name": "hsl",
              "type": "hslObject",
              "description": "The hsl object"
            },
            {
              "name": "hex",
              "type": "string",
              "description": "The hex string"
            },
            {
              "name": "oldColor",
              "type": "string",
              "description": "The old color string before setting"
            }
          ],
          "return": {
            "type": "[type]",
            "desc": "The computed color string"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_hexChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 657,
              "column": 4
            },
            "end": {
              "line": 677,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hex"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_rgbChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 679,
              "column": 4
            },
            "end": {
              "line": 723,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "r"
            },
            {
              "name": "g"
            },
            {
              "name": "b"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_hslChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 725,
              "column": 4
            },
            "end": {
              "line": 768,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "h"
            },
            {
              "name": "s"
            },
            {
              "name": "l"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_formatChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 770,
              "column": 4
            },
            "end": {
              "line": 786,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "format"
            },
            {
              "name": "oldFormat"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_alphaChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 788,
              "column": 4
            },
            "end": {
              "line": 818,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alpha"
            },
            {
              "name": "oldAlpha"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_alphaModeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 820,
              "column": 4
            },
            "end": {
              "line": 841,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alphaMode"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_withoutAlphaChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 843,
              "column": 4
            },
            "end": {
              "line": 853,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "withoutAlpha"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "_attachDom",
          "description": "attach dom with `delegatesFocus: true` so that the element is also focussed while its's children are too, and to autofocus to first tabable",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 39,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_defaultIsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 155,
              "column": 4
            },
            "end": {
              "line": 157,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "value to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is set"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_defaultValidate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 167,
              "column": 4
            },
            "end": {
              "line": 169,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet",
              "type": "Function",
              "description": "The function that defines if the value is set"
            },
            {
              "name": "value",
              "type": "Object",
              "description": "value to validate"
            },
            {
              "name": "required",
              "type": "Boolean",
              "description": "if true, the value is required"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true, if the value is valid"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeInvalid",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 178,
              "column": 4
            },
            "end": {
              "line": 180,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "validate"
            },
            {
              "name": "isSet"
            },
            {
              "name": "value"
            },
            {
              "name": "required"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeValueIsSet",
          "description": "defines whether the value is set",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 187,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isSet"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 474,
              "column": 4
            },
            "end": {
              "line": 479,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_defaultChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 519,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_createReflectPropertyToValueObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 208,
              "column": 4
            },
            "end": {
              "line": 218,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectPropertyToValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 220,
              "column": 4
            },
            "end": {
              "line": 222,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_reflectValueToProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 224,
              "column": 4
            },
            "end": {
              "line": 226,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "validate",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 417,
              "column": 4
            },
            "end": {
              "line": 424,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 291,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_computeShouldNative",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 293,
              "column": 4
            },
            "end": {
              "line": 295,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "native"
            }
          ],
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_addPickerTransitionEndListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 297,
              "column": 4
            },
            "end": {
              "line": 304,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_removePickerTransitionEndListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 306,
              "column": 4
            },
            "end": {
              "line": 308,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_onPickerTransitionEnd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 310,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_addCancelOnClickListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 321,
              "column": 4
            },
            "end": {
              "line": 326,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_removeCancelOnClickListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 328,
              "column": 4
            },
            "end": {
              "line": 331,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_addCloseOnPickerOpenedListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 333,
              "column": 4
            },
            "end": {
              "line": 335,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_removeCloseOnPickerOpenedListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 337,
              "column": 4
            },
            "end": {
              "line": 339,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_addKeyListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 348,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_removeKeyListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 350,
              "column": 4
            },
            "end": {
              "line": 352,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_nativeOnMobileChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 354,
              "column": 4
            },
            "end": {
              "line": 367,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_checkKeycode",
          "description": "key press event handler",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 373,
              "column": 4
            },
            "end": {
              "line": 389,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "[type]",
              "description": "Event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "close",
          "description": "close the picker",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 437,
              "column": 4
            },
            "end": {
              "line": 439,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "toggle",
          "description": "toggle the picker",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 444,
              "column": 4
            },
            "end": {
              "line": 446,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "confirm",
          "description": "confirms the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 451,
              "column": 4
            },
            "end": {
              "line": 457,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "cancel",
          "description": "cancels the input",
          "privacy": "public",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 463,
              "column": 4
            },
            "end": {
              "line": 472,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_confirmedValueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 481,
              "column": 4
            },
            "end": {
              "line": 487,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "confirmedValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_setConfirmedValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 500,
              "column": 4
            },
            "end": {
              "line": 502,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "_autoConfirmChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 508,
              "column": 4
            },
            "end": {
              "line": 512,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoConfirm"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "InputPickerPattern"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/color-picker.html",
          "description": "Color Picker"
        },
        {
          "url": "demo/form.html",
          "description": "In A Form"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 34,
          "column": 7
        },
        "end": {
          "line": 43,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OverlayColorPicker",
      "attributes": [
        {
          "name": "always-on-top",
          "description": "Set to true to keep overlay always on top.",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/overlay-picker-mixin.js",
            "start": {
              "line": 19,
              "column": 8
            },
            "end": {
              "line": 21,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "no-overlap",
          "description": "Will position the element around the positionTarget without overlapping it.",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/overlay-picker-mixin.js",
            "start": {
              "line": 25,
              "column": 8
            },
            "end": {
              "line": 28,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "with-backdrop",
          "description": "Set to true to display a backdrop behind the overlay. It traps the focus\nwithin the light DOM of the overlay.",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/overlay-picker-mixin.js",
            "start": {
              "line": 33,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "no-cancel-on-outside-click",
          "description": "Set to `true` to disable canceling the dropdown by clicking outside the picker.",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 230,
              "column": 8
            },
            "end": {
              "line": 233,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "dynamic-align",
          "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as preferred alignment\nand if there's not enough space, it will pick the values which minimize the cropping.",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/overlay-picker-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 52,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "auto-fit-on-attach",
          "description": "Set to true to auto-fit on attach.",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/overlay-picker-mixin.js",
            "start": {
              "line": 57,
              "column": 8
            },
            "end": {
              "line": 60,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "fit-into",
          "description": "The element to fit the overlay into. By default it is the window.",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/overlay-picker-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "position-target",
          "description": "The element that should be used to position the overlay. If not set, it will\ndefault to the polyfill node.",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/overlay-picker-mixin.js",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 75,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Element | null | undefined",
          "inheritedFrom": "OverlayPickerMixin"
        },
        {
          "name": "hide-random-button",
          "description": "if true the random button is hidden",
          "sourceRange": {
            "file": "color-element.js",
            "start": {
              "line": 223,
              "column": 8
            },
            "end": {
              "line": 225,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ColorElementPattern"
        },
        {
          "name": "hide-transparency-pattern",
          "description": "hide the transparency pattern",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 50,
              "column": 8
            },
            "end": {
              "line": 53,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "no-random-color-on-click",
          "description": "if true, clicking on the color badge won't generate a random color",
          "sourceRange": {
            "file": "../@fooloomanzoo/color-input/color-badge.js",
            "start": {
              "line": 58,
              "column": 8
            },
            "end": {
              "line": 62,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ColorBadgePattern"
        },
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 61,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "hex",
          "description": "Hex-color",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 286,
              "column": 8
            },
            "end": {
              "line": 290,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "r",
          "description": "Red",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 295,
              "column": 8
            },
            "end": {
              "line": 298,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "g",
          "description": "Green",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 303,
              "column": 8
            },
            "end": {
              "line": 306,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "b",
          "description": "Blue",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 311,
              "column": 8
            },
            "end": {
              "line": 314,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "h",
          "description": "Hue",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 319,
              "column": 8
            },
            "end": {
              "line": 322,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "s",
          "description": "Saturation (hsl)",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 327,
              "column": 8
            },
            "end": {
              "line": 330,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "l",
          "description": "Lightness",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 335,
              "column": 8
            },
            "end": {
              "line": 338,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "alpha",
          "description": "Alpha",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 343,
              "column": 8
            },
            "end": {
              "line": 348,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "alpha-mode",
          "description": "if true, colorString has alpha",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 353,
              "column": 8
            },
            "end": {
              "line": 357,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "without-alpha",
          "description": "if true, alpha won't be used",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 362,
              "column": 8
            },
            "end": {
              "line": 365,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "hsl-precision",
          "description": "Precision of hsl-colorStrings, if the format is 'hsl' (for saturation and lightness it is applied according to their percentage colorString)",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 370,
              "column": 8
            },
            "end": {
              "line": 373,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "format",
          "description": "format of the colorString (possible colorStrings: 'rgb', 'hex', 'hsl', 'auto')",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 378,
              "column": 8
            },
            "end": {
              "line": 383,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "fixed-format",
          "description": "format is locked and does not switch according to the colorString",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 388,
              "column": 8
            },
            "end": {
              "line": 390,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "color-string",
          "description": "value as color-string",
          "sourceRange": {
            "file": "../@fooloomanzoo/property-mixins/color-mixin.js",
            "start": {
              "line": 403,
              "column": 8
            },
            "end": {
              "line": 407,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ColorMixin"
        },
        {
          "name": "name",
          "description": "name of the input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 46,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "title",
          "description": "description for the element and can be used as a hint for invalid values",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 53,
              "column": 8
            },
            "end": {
              "line": 56,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value",
          "description": "value of the input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 73,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "description": "default value of the value, when it does not validate",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "description": "disables the input",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 90,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "description": "required attribute",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 95,
              "column": 8
            },
            "end": {
              "line": 100,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "required",
          "description": "required attribute",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 105,
              "column": 8
            },
            "end": {
              "line": 110,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "value-is-set",
          "description": "is true when the value is set",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/form-element-mixin.js",
            "start": {
              "line": 115,
              "column": 8
            },
            "end": {
              "line": 119,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "native",
          "description": "Set to `true` to use the native input, if it available",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 159,
              "column": 8
            },
            "end": {
              "line": 162,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "native-on-mobile",
          "description": "Set to `true` to use the native input automatically on mobile devices, if it available",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 167,
              "column": 8
            },
            "end": {
              "line": 170,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "mobile-user-agent-test-string",
          "description": "When `nativeOnMobile` is set to `true` this string is used to test the userAgent for a mobile device",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 175,
              "column": 8
            },
            "end": {
              "line": 179,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "opened",
          "description": "if `true` the picker is opened",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 184,
              "column": 8
            },
            "end": {
              "line": 189,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "horizontal-align",
          "description": "The orientation against which to align the element horizontally\nrelative to the related input element. Possible values are \"left\", \"right\", \"center\", \"auto\". (comparable to `iron-fit-behavior` and its `no-overlap`-attribute)",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 195,
              "column": 8
            },
            "end": {
              "line": 199,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "vertical-align",
          "description": "The orientation against which to align the element vertically\nrelative to the related input element. Possible values are \"top\", \"bottom\", \"middle\", \"auto\". (comparable to `iron-fit-behavior` and its `no-overlap`-attribute)",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 205,
              "column": 8
            },
            "end": {
              "line": 209,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "auto-confirm",
          "description": "Set to `true` to make the input auto-confirming",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 214,
              "column": 8
            },
            "end": {
              "line": 217,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "no-cancel-on-esc-key",
          "description": "Set to `true` to disable canceling the overlay with the ESC key.",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 222,
              "column": 8
            },
            "end": {
              "line": 225,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "no-close-on-picker-opened",
          "description": "Set to `true` to disable closing the dropdown when opening another picker.",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 238,
              "column": 8
            },
            "end": {
              "line": 241,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "no-tip",
          "description": "Set to `true` to disable the tip of the picker",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 246,
              "column": 8
            },
            "end": {
              "line": 249,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "name": "confirmed-value",
          "description": "The confirmed value. When `auto-confirm` is not set, the value will only change, when you confirm.",
          "sourceRange": {
            "file": "../@fooloomanzoo/input-picker-pattern/input-picker-pattern.js",
            "start": {
              "line": 254,
              "column": 8
            },
            "end": {
              "line": 257,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "InputPickerPattern"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "input-picker-closed",
          "description": "input-picker-closed\nFired after a picker has been closed.",
          "metadata": {},
          "inheritedFrom": "InputPickerPattern"
        },
        {
          "type": "CustomEvent",
          "name": "input-picker-opened",
          "description": "input-picker-opened\nFired when a picker has been opened.",
          "metadata": {},
          "inheritedFrom": "InputPickerPattern"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "overlay-color-picker",
      "mixins": [
        "OverlayPickerMixin",
        "ColorPickerPattern",
        "ColorElementPattern",
        "ColorInputPattern",
        "ColorTextInputPattern",
        "ColorBadgePattern",
        "ColorFormMixin",
        "ColorMixin",
        "InputPickerPattern"
      ]
    }
  ],
  "mixins": [
    {
      "description": "Mixin for color-element",
      "summary": "",
      "path": "color-element.js",
      "properties": [
        {
          "name": "_sliderWidth",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 8
            },
            "end": {
              "line": 196,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "_saturationHeight",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 8
            },
            "end": {
              "line": 201,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "184"
        },
        {
          "name": "_saturationWidth",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 8
            },
            "end": {
              "line": 206,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "184"
        },
        {
          "name": "_hueContext",
          "type": "CanvasRenderingContext2D | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 208,
              "column": 8
            },
            "end": {
              "line": 210,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "CanvasRenderingContext2D"
            }
          }
        },
        {
          "name": "_saturationContext",
          "type": "CanvasRenderingContext2D | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 8
            },
            "end": {
              "line": 214,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "CanvasRenderingContext2D"
            }
          }
        },
        {
          "name": "_alphaContext",
          "type": "CanvasRenderingContext2D | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 8
            },
            "end": {
              "line": 218,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "CanvasRenderingContext2D"
            }
          }
        },
        {
          "name": "hideRandomButton",
          "type": "boolean | null | undefined",
          "description": "if true the random button is hidden",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 8
            },
            "end": {
              "line": 225,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 239,
              "column": 4
            },
            "end": {
              "line": 242,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 4
            },
            "end": {
              "line": 247,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "render",
          "description": "render the element",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 252,
              "column": 4
            },
            "end": {
              "line": 258,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "resize",
          "description": "resize the element",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 4
            },
            "end": {
              "line": 266,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeColorElementContexts",
          "description": "computes the canvas contexts of the color element",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 4
            },
            "end": {
              "line": 291,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeColorElementSizeProperties",
          "description": "computes the size properties for the color element canvas",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 296,
              "column": 4
            },
            "end": {
              "line": 318,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_initializeHueSlider",
          "description": "draw hue-sliders background",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 323,
              "column": 4
            },
            "end": {
              "line": 337,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hueContext"
            },
            {
              "name": "sliderWidth"
            },
            {
              "name": "saturationHeight"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_drawColorElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 339,
              "column": 4
            },
            "end": {
              "line": 365,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alphaContext"
            },
            {
              "name": "saturationContext"
            },
            {
              "name": "h"
            },
            {
              "name": "sliderWidth"
            },
            {
              "name": "saturationWidth"
            },
            {
              "name": "saturationHeight"
            },
            {
              "name": "withoutAlpha"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_moveHueSlider",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 367,
              "column": 4
            },
            "end": {
              "line": 369,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "h"
            },
            {
              "name": "height"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_moveAlphaSlider",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 371,
              "column": 4
            },
            "end": {
              "line": 376,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alpha"
            },
            {
              "name": "height"
            },
            {
              "name": "withoutAlpha"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_moveColorPin",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 378,
              "column": 4
            },
            "end": {
              "line": 387,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "s"
            },
            {
              "name": "l"
            },
            {
              "name": "width"
            },
            {
              "name": "height"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_moveSelector",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 389,
              "column": 4
            },
            "end": {
              "line": 395,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            },
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onDown",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 397,
              "column": 4
            },
            "end": {
              "line": 402,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onTrack",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 404,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onKeyDown",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 453,
              "column": 4
            },
            "end": {
              "line": 505,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onUp",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 507,
              "column": 4
            },
            "end": {
              "line": 511,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onDblClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 513,
              "column": 4
            },
            "end": {
              "line": 513,
              "column": 20
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onSelectEnd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 515,
              "column": 4
            },
            "end": {
              "line": 522,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onColorElementBlur",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 524,
              "column": 4
            },
            "end": {
              "line": 527,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onColorElementFocus",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 529,
              "column": 4
            },
            "end": {
              "line": 532,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_stopPropagation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 534,
              "column": 4
            },
            "end": {
              "line": 537,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getActiveProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 539,
              "column": 4
            },
            "end": {
              "line": 544,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_checkSelectorForProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 546,
              "column": 4
            },
            "end": {
              "line": 556,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_defineActiveCanvas",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 558,
              "column": 4
            },
            "end": {
              "line": 571,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 7
        },
        "end": {
          "line": 573,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "ColorElementPattern",
      "attributes": [
        {
          "name": "hide-random-button",
          "description": "if true the random button is hidden",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 8
            },
            "end": {
              "line": 225,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "Mixin for color-picker",
      "summary": "",
      "path": "color-picker.js",
      "properties": [
        {
          "name": "_confirmedColorHeight",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 8
            },
            "end": {
              "line": 149,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "_confirmedColorWidth",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 8
            },
            "end": {
              "line": 153,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "_confirmedColorCanvasContext",
          "type": "CanvasRenderingContext2D | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 8
            },
            "end": {
              "line": 157,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "CanvasRenderingContext2D"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 4
            },
            "end": {
              "line": 175,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "render",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 180,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "resize",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 4
            },
            "end": {
              "line": 185,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "reset",
          "description": "reset the color properties",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeConfirmedColorContext",
          "description": "computes the canvas context of the recent color badge",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 4
            },
            "end": {
              "line": 205,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeConfirmedColorSizeProperties",
          "description": "computes the size properties for the confirmed color badge canvas",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 210,
              "column": 4
            },
            "end": {
              "line": 224,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_drawConfimedColorBadge",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "confirmedColorCanvasContext"
            },
            {
              "name": "value"
            },
            {
              "name": "width"
            },
            {
              "name": "height"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_openedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 233,
              "column": 4
            },
            "end": {
              "line": 241,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opened"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onDblClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 243,
              "column": 4
            },
            "end": {
              "line": 245,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_addClickListenerForBadge",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 4
            },
            "end": {
              "line": 247,
              "column": 34
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_removeClickListenerForBadge",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 249,
              "column": 4
            },
            "end": {
              "line": 249,
              "column": 37
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_resetValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 4
            },
            "end": {
              "line": 255,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 19,
          "column": 7
        },
        "end": {
          "line": 257,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "ColorPickerPattern",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ]
}
